# Python stubs generated by omniidl from idl/CarSimulator.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "BasicDataType.idl"
import BasicDataType_idl
_0_RTC = omniORB.openModule("RTC")
_0_RTC__POA = omniORB.openModule("RTC__POA")
# #include "ExtendedDataTypes.idl"
import ExtendedDataTypes_idl
_0_RTC = omniORB.openModule("RTC")
_0_RTC__POA = omniORB.openModule("RTC__POA")

#
# Start of module "ogata_lab"
#
__name__ = "ogata_lab"
_0_ogata_lab = omniORB.openModule("ogata_lab", r"idl/CarSimulator.idl")
_0_ogata_lab__POA = omniORB.openModule("ogata_lab__POA", r"idl/CarSimulator.idl")


# struct CarCommand
_0_ogata_lab.CarCommand = omniORB.newEmptyClass()
class CarCommand (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ogata_lab/CarCommand:1.0"

    def __init__(self, tm, handleAngleRad, acceleratorPressMeter, breakPressMeter):
        self.tm = tm
        self.handleAngleRad = handleAngleRad
        self.acceleratorPressMeter = acceleratorPressMeter
        self.breakPressMeter = breakPressMeter

_0_ogata_lab.CarCommand = CarCommand
_0_ogata_lab._d_CarCommand  = (omniORB.tcInternal.tv_struct, CarCommand, CarCommand._NP_RepositoryId, "CarCommand", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "handleAngleRad", omniORB.tcInternal.tv_double, "acceleratorPressMeter", omniORB.tcInternal.tv_double, "breakPressMeter", omniORB.tcInternal.tv_double)
_0_ogata_lab._tc_CarCommand = omniORB.tcInternal.createTypeCode(_0_ogata_lab._d_CarCommand)
omniORB.registerType(CarCommand._NP_RepositoryId, _0_ogata_lab._d_CarCommand, _0_ogata_lab._tc_CarCommand)
del CarCommand

# struct CameraData
_0_ogata_lab.CameraData = omniORB.newEmptyClass()
class CameraData (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ogata_lab/CameraData:1.0"

    def __init__(self, width, height, pixels):
        self.width = width
        self.height = height
        self.pixels = pixels

_0_ogata_lab.CameraData = CameraData
_0_ogata_lab._d_CameraData  = (omniORB.tcInternal.tv_struct, CameraData, CameraData._NP_RepositoryId, "CameraData", "width", omniORB.tcInternal.tv_ulong, "height", omniORB.tcInternal.tv_ulong, "pixels", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0))
_0_ogata_lab._tc_CameraData = omniORB.tcInternal.createTypeCode(_0_ogata_lab._d_CameraData)
omniORB.registerType(CameraData._NP_RepositoryId, _0_ogata_lab._d_CameraData, _0_ogata_lab._tc_CameraData)
del CameraData

# struct CarStatus
_0_ogata_lab.CarStatus = omniORB.newEmptyClass()
class CarStatus (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ogata_lab/CarStatus:1.0"

    def __init__(self, tm, frontLeftCamera, frontRightCamera, frontCenterCamera, velocity, acceleration, angularAcecleration):
        self.tm = tm
        self.frontLeftCamera = frontLeftCamera
        self.frontRightCamera = frontRightCamera
        self.frontCenterCamera = frontCenterCamera
        self.velocity = velocity
        self.acceleration = acceleration
        self.angularAcecleration = angularAcecleration

_0_ogata_lab.CarStatus = CarStatus
_0_ogata_lab._d_CarStatus  = (omniORB.tcInternal.tv_struct, CarStatus, CarStatus._NP_RepositoryId, "CarStatus", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "frontLeftCamera", omniORB.typeMapping["IDL:ogata_lab/CameraData:1.0"], "frontRightCamera", omniORB.typeMapping["IDL:ogata_lab/CameraData:1.0"], "frontCenterCamera", omniORB.typeMapping["IDL:ogata_lab/CameraData:1.0"], "velocity", omniORB.typeMapping["IDL:RTC/Velocity3D:1.0"], "acceleration", omniORB.typeMapping["IDL:RTC/Acceleration3D:1.0"], "angularAcecleration", omniORB.typeMapping["IDL:RTC/AngularAcceleration3D:1.0"])
_0_ogata_lab._tc_CarStatus = omniORB.tcInternal.createTypeCode(_0_ogata_lab._d_CarStatus)
omniORB.registerType(CarStatus._NP_RepositoryId, _0_ogata_lab._d_CarStatus, _0_ogata_lab._tc_CarStatus)
del CarStatus

# struct SimulatorStatus
_0_ogata_lab.SimulatorStatus = omniORB.newEmptyClass()
class SimulatorStatus (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ogata_lab/SimulatorStatus:1.0"

    def __init__(self, tm, pose):
        self.tm = tm
        self.pose = pose

_0_ogata_lab.SimulatorStatus = SimulatorStatus
_0_ogata_lab._d_SimulatorStatus  = (omniORB.tcInternal.tv_struct, SimulatorStatus, SimulatorStatus._NP_RepositoryId, "SimulatorStatus", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "pose", omniORB.typeMapping["IDL:RTC/Pose3D:1.0"])
_0_ogata_lab._tc_SimulatorStatus = omniORB.tcInternal.createTypeCode(_0_ogata_lab._d_SimulatorStatus)
omniORB.registerType(SimulatorStatus._NP_RepositoryId, _0_ogata_lab._d_SimulatorStatus, _0_ogata_lab._tc_SimulatorStatus)
del SimulatorStatus

#
# End of module "ogata_lab"
#
__name__ = "CarSimulator_idl"

_exported_modules = ( "ogata_lab", )

# The end.